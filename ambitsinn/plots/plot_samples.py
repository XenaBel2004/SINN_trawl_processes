from typing import Tuple

import torch
from matplotlib.axes import Axes
from torch import Tensor

from ..processes import StationaryStochasticProcess


def plot_sample_trajs(
    ax_true: Axes,
    ax_sinn: Axes,
    traj_num: int,
    target_proc: StationaryStochasticProcess,
    input_proc: StationaryStochasticProcess,
    time: Tensor,
    net: torch.nn.Module,
    **plot_kwargs,
) -> Tuple[Axes, Axes]:
    """
    Plot sample trajectories from both the true target process and SINN-generated samples.

    Creates two side-by-side plots comparing individual sample trajectories from the
    exact target process and those generated by the Stochastic Integrator Neural Network.

    Parameters
    ----------
    ax_true
        Axes object for plotting trajectories from the true target process.
    ax_sinn
        Axes object for plotting trajectories generated by the SINN.
    traj_num
        Number of sample trajectories to generate and plot.
    target_proc
        Target process object
    input_proc
        Input process object
    time
        Time points at which to evaluate the processes.
    net
        Trained SINN network that generates samples from input process.
    **plot_kwargs
        Additional keyword arguments for plotting customization.

    Returns
    -------
    Tuple[Axes, Axes]
        Tuple containing the two modified axes objects (ax_true, ax_sinn).

    Notes
    -----
    The function generates two plots showing multiple sample paths:
    - Left plot: Exact trajectories sampled from the target process
    - Right plot: Corresponding trajectories generated by the SINN

    Examples
    --------
    >>> fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    >>> plot_sample_trajs(ax1, ax2, 10, target_process, input_process, time_tensor, trained_net)
    >>> plt.tight_layout()
    >>> plt.show()
    """
    sec_length = time.numel()
    input_ = input_proc.sample(time, batch_size=traj_num, unsqueeze_last=True)  # X_i
    proc_ = target_proc.sample(time, batch_size=traj_num, unsqueeze_last=False)
    sinn_ = net(input_)[0].reshape(sec_length, traj_num)  # Y_i

    sinn_samples = sinn_.detach().cpu().numpy()
    proc_samples = proc_.detach().cpu().numpy()
    T = time.detach().cpu().numpy()

    ax_true.set_title("Exact sampled trajectories")
    ax_true.plot(T, proc_samples, **plot_kwargs)

    ax_sinn.set_title("SINN sampled trajectories")
    ax_sinn.plot(T, sinn_samples, **plot_kwargs)

    for ax in (ax_true, ax_sinn):
        ax.set_xlabel(r"$t$", fontsize=15)
        ax.set_ylabel(r"$x(t)$", fontsize=15)
        ax.grid()
    return ax_true, ax_sinn
