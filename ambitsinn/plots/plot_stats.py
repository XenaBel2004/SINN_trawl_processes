from typing import Any, Dict, Tuple

import torch
from matplotlib.axes import Axes
from numpy.typing import NDArray
from torch import Tensor

from ..processes import StationaryStochasticProcess
from ..sinn import ACF, GaussianKDE


def plot_stats(
    ax_acf: Axes,
    ax_acf2: Axes,
    ax_kde: Axes,
    target_proc: StationaryStochasticProcess,
    input_proc: StationaryStochasticProcess,
    time: Tensor,
    net: torch.nn.Module,
    kde_x_low: float = -5,
    kde_x_upp: float = 5,
    kde_points: int = 100,
    batch_size: int = 100,
    **plot_kwargs: Dict[str, Any],
) -> Tuple[Axes, Axes, Axes]:
    """
    Plot statistical comparisons between SINN-generated samples and true process samples.

    Creates three plots comparing the autocorrelation function (ACF), ACF of squared
    process, and kernel density estimate (KDE) between samples generated by a
    Stochastic Integrator Neural Network (SINN) and samples from the target process.

    Parameters
    ----------
    ax_acf
        Axes object for plotting the autocorrelation function.
    ax_acf2
        Axes object for plotting the autocorrelation function of squared process.
    ax_kde
        Axes object for plotting kernel density estimates.
    target_proc
        Target process object with methods `sample`, `acf`, and `pdf`.
    input_proc
        Input process object with methods `sample` and `process.pdf`.
    time
        Time points at which to evaluate the processes.
    net
        Trained SINN network that generates samples from input process.
    kde_x_low
        Lower bound for KDE x-axis range. Default is -5.
    kde_x_upp
        Upper bound for KDE x-axis range. Default is 5.
    kde_points
        Number of points for KDE evaluation. Default is 100.
    batch_size
        Number of sample paths to generate. Default is 100.
    **plot_kwargs
        Additional keyword arguments for plotting customization.

    Returns
    -------
    Tuple[Axes, Axes, Axes]
        Tuple containing the three modified axes objects (ax_acf, ax_acf2, ax_kde).

    Notes
    -----
    The function generates:
    - ACF plot: Compares ACF of SINN samples, true samples, and exact ACF from target process
    - Squared ACF plot: Compares ACF of squared SINN samples and squared true samples
    - KDE plot: Compares PDF of input process, target PDF, and KDEs from SINN and true samples

    """
    sec_length = time.numel()

    def acf(x: Tensor) -> NDArray:
        return ACF(lags=sec_length, method="brute")(x).detach().cpu().numpy()

    def kde(x: Tensor) -> NDArray:
        return GaussianKDE(kde_x_low, kde_x_upp, kde_points)(x).detach().cpu().numpy()

    proc_samples = target_proc.sample(time, batch_size=batch_size, unsqueeze_last=False)
    input_samples = input_proc.sample(time, batch_size=batch_size, unsqueeze_last=True)  # X_i
    sinn_samples = net(input_samples)[0].reshape(sec_length, batch_size)  # Y_i

    T = time.detach().cpu().numpy()

    ax_acf.set_title(r"ACF", fontsize=15)
    ax_acf.plot(T, acf(sinn_samples), "b--", label=r"SINN samples")
    ax_acf.plot(T, acf(proc_samples), "r--", label=r"True samples")
    ax_acf.plot(T, target_proc.acf(time).cpu().numpy(), "g", label=r"Exact")

    ax_acf2.set_title("ACF of squared process")
    ax_acf2.plot(T, acf(sinn_samples**2), "b--", label=r"SINN samples")
    ax_acf2.plot(T, acf(proc_samples**2), "r--", label=r"True samples")

    for ax in (ax_acf, ax_acf2):
        ax.set_xlabel(r"$t$", fontsize=15)
        ax.set_ylabel(r"$\rho(t)$", fontsize=15)

    x = torch.linspace(kde_x_low, kde_x_upp, kde_points)
    f_input = input_proc.pdf(torch.linspace(kde_x_low, kde_x_upp, kde_points, device=input_proc.device)).cpu().numpy()
    f_true = target_proc.pdf(torch.linspace(kde_x_low, kde_x_upp, kde_points, device=target_proc.device)).cpu().numpy()
    f_sinn_data = kde(sinn_samples)
    f_true_data = kde(proc_samples)

    ax_kde.set_title("KDE")
    ax_kde.plot(x, f_input, "b--", label=r"Input PDF")
    ax_kde.plot(x, f_true, "b", label=r"Target PDF")
    ax_kde.plot(x, f_sinn_data, "r--", label=r"KDE from SINN samples")
    ax_kde.plot(x, f_true_data, "g--", label=r"KDE from true samples")
    ax_kde.set_xlabel(r"$x$", fontsize=15)
    ax_kde.set_ylabel(r"$f$", fontsize=15)

    for ax in (ax_acf, ax_acf2, ax_kde):
        ax.grid()
        ax.legend()

    return ax_acf, ax_acf2, ax_kde
